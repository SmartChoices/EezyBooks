          from AmazonDotCom.cs
		  
		    //if (rbGBPound.Checked == true || rbEUDollar.Checked == true || rbCNDollar.Checked == true) {  //  convert?
            //    string toCurrency = "";
            //    if (rbGBPound.Checked == true)
            //        toCurrency = "GBP";
            //    else if (rbEUDollar.Checked == true)
            //        toCurrency = "EUR";
            //    else if (rbCNDollar.Checked == true)
            //        toCurrency = "CAD";

            //    WebClient web = new WebClient();
            //    string url = string.Format("http://www.google.com/ig/calculator?hl=en&q={1}USD=?{0}", toCurrency, dr.GetDecimal((int)tBooks.Price));
            //    string response = web.DownloadString(url);
            //    Regex regex = new Regex("rhs: \"(\\d*\\.\\d*)");
            //    Match match = regex.Match(response);

            //    decimal rate = System.Convert.ToDecimal(match.Groups[1].Value);
            //    dataBuild += rate.ToString() + "\t";  //  converted price
            //}
            //else

#if false  //  this is the code for the second export file
        //------------------------    build a non-ISBN tab-delimited file    -----------------------|
        public void buildAmazonNonISBNTabFile(FbDataReader dr) {

            string dataBuild;
            /*
            product-id\tproduct-id-type\ttitle\tauthor\tpublisher\tpub-date\tbinding\t" +
            "item-condition\tprice\tsku\tquantity\tadd-delete\twill-ship-internationally\t" +
            "expedited-shipping\titem-note\titem-is-marketplace\titem-name\titem-description\tcategory1\timage-url");

            * */
            dataBuild = "\t";  //  product-id
            dataBuild += "\t";  //  product-id type 
            if (dr.GetString((int)tBooks.Title).Length > 80)
                dataBuild += dr.GetString((int)tBooks.Title).Substring(0, 80) + "\t";  //  item name (title)
            else
                dataBuild += dr.GetString((int)tBooks.Title) + "\t";  //  item name (title)

            if (dr.GetString((int)tBooks.Author).Length != 0)
                dataBuild += dr.GetString((int)tBooks.Author) + "\t";  //  author
            else
                dataBuild += " \t";

            if (dr.GetString((int)tBooks.Pub).Length != 0)
                dataBuild += dr.GetString((int)tBooks.Pub) + "\t";  //  publisher 
            else
                dataBuild += " \t";

            if (dr.GetString((int)tBooks.PubYear).Length != 0)
                dataBuild += dr.GetString((int)tBooks.PubYear) + "\t";  //  pub date
            else
                dataBuild += " \t";

            dataBuild += dr.GetString((int)tBooks.Bndg) + "\t";  //  binding

            //  item condition
            string tempCond = dr.GetString((int)tBooks.Condn);
            //* 1 = Used; Like New
            //* 2 = Used; Very Good
            //* 3 = Used; Good
            //* 4 = Used; Acceptable
            //* 5 = Collectible; Like New
            //* 6 = Collectible; Very Good
            //* 7 = Collectible; Good
            //* 8 = Collectible; Acceptable
            //* 11 = New

            switch (tempCond) {
                case "New":
                case "As New":
                case "New Book":
                    dataBuild += "11\t";
                    break;
                case "Fine":
                case "Fine - Used":
                    dataBuild += "1\t";
                    break;
                case "Very Good":
                case "Very Good - Used":
                    dataBuild += "2\t";
                    break;
                case "Good":
                case "Good - Used":
                    dataBuild += "3\t";
                    break;
                case "Fair":
                case "Fair - Used":
                case "Poor":
                case "Poor - Used":
                    dataBuild += "4\t";
                    break;
                case "Fine - Collectible":
                    dataBuild += "5\t";
                    break;
                case "Very Good - Collectible":
                    dataBuild += "6\t";
                    break;
                case "Good - Collectible":
                    dataBuild += "7\t";
                    break;
                case "Fair - Collectible":
                case "Poor - Collectible":
                    dataBuild += "8\t";
                    break;
                default:
                    dataBuild += "3\t";  //  default to "Good"
                    break;
            }
            dataBuild += dr.GetDecimal((int)tBooks.Price) + "\t";  //  price
            dataBuild += dr.GetString((int)tBooks.BookNbr) + "\t";  //  SKU
            dataBuild += "1\t";  //  quantity (always 1)

            if (dr.GetString((int)tBooks.Stat) == "Sold")
                dataBuild += "d\t";  //  delete item from inventory
            else
                dataBuild += " \t";  //  item is For Sale

            UInt16 target = 0;
            string shipVerbage = "";
            if (!dr.IsDBNull((int)tBooks.Shipping))   //  Shipping field exists...
            {
                target = (UInt16)dr.GetInt16((UInt16)(tBooks.Shipping));
                dataBuild += (target & 2) == 2 ? "y\t" : "n\t";  //  Intl' shipping

                if ((target | 61) != 0)  //  is there any expedited shipping?
                {
                    shipVerbage = (target & 16) == 16 ? "domestic," : "";  //  domestic expedited
                    shipVerbage += (target & 8) == 8 ? "second," : "";  //  2nd day
                    shipVerbage += (target & 4) == 4 ? "next," : "";  //  next day
                    shipVerbage += (target & 1) == 1 ? "international" : "";  //  Expedited
                    dataBuild += shipVerbage + "\t";  //  ending tab
                }
                else
                    dataBuild += shipVerbage + "n\t";  //  no expedited shipping
            }
            else
                dataBuild += "n\tn\t";  //  only available to U.S. customers w/ no expedited shipping

            //  test for comma in last shipping type
            int lastComma = dataBuild.IndexOf(',', dataBuild.Length - 4, 4);
            dataBuild = (lastComma > 0) ? dataBuild.Remove(lastComma, 1) : dataBuild;

            string buildItemNote = dr.GetString((int)tBooks.Descr) + ";";  //  description

            if (!dr.IsDBNull((int)tBooks.Type) && dr.GetString((int)tBooks.Type).Length > 0)
                buildItemNote += dr.GetString((int)tBooks.Type) + ";";  //  type

            if (!dr.IsDBNull((int)tBooks.Ed) && dr.GetString((int)tBooks.Ed).Length > 0)
                buildItemNote += dr.GetString((int)tBooks.Ed) + ";"; //  edition

            if (!dr.IsDBNull((int)tBooks.Ed) && dr.GetString((int)tBooks.Jaket).Length > 0)
                buildItemNote += "Jacket: " + dr.GetString((int)tBooks.Jaket) + ";"; //  dust jacket

            dataBuild += buildItemNote + "\t";  //  description (->item-note)

            dataBuild += "n\t";  //  item-is-marketplace set to 'N' for non-isbn books

            dataBuild += "68284\t";  //  category1 (says populated by Amazon.com)
            dataBuild += "\t";  //  image-url (currently not supported by this program)

            //twStdAmazon.WriteLine(dataBuild);

            return;
        }
#endif
#if NOCODE  //  this is the UIEE code for amazon.com
                   //  get length of input file without ISBNs
            //fi = new FileInfo(uieeFilename[1]);
            //fileLength = (int)fi.Length;
            //if (fileLength > 0)
            //{
            //    HttpWebRequest myRequest2 = null;
            //    if (args[2].Contains("purge"))  //  are we doing a purge (as noted in the filename)?
            //        myRequest2 = (HttpWebRequest)WebRequest.Create(purgeAndReplace);
            //    else
            //        myRequest2 = (HttpWebRequest)WebRequest.Create(addModifyDeleteURL);

            //    myRequest2.Method = "POST";
            //    myRequest2.Headers.Add("Authorization: Basic " + EncodeBase64(args[0] + ":" + args[1]));
            //    myRequest2.ContentType = "text/xml";
            //    myRequest2.Timeout = 600000;
            //    myRequest2.KeepAlive = false;
            //    myRequest2.CookieContainer = cookieContainer;

            //    //  additional parameters 
            //    myRequest2.Headers.Add("UploadFor", "Marketplace");
            //    myRequest2.Headers.Add("FileFormat", "TabDelimitedBooks");
            //    myRequest2.Headers.Add("Asinate", "Y");  //  enable asination (faux-ISBNs)
            //    myRequest2.ContentLength = fileLength + 2;  //  set length of data  ::property cannot be set after writing has started

            //    Stream reqStream = myRequest2.GetRequestStream();  //  get a request stream
            //    FileStream rdr = new FileStream(uieeFilename[1], FileMode.Open, FileAccess.Read);

            //    //  read the data and put it into the request buffer
            //    byte[] inData = new byte[fileLength];
            //    byte[] crLF = { 13, 10 };

            //    int bytesRead = rdr.Read(inData, 0, fileLength);
            //    reqStream.Write(inData, 0, bytesRead);
            //    reqStream.Write(crLF, 0, 2);
            //    rdr.Close();
            //    reqStream.Close();

            //    uploadToAmazon(myRequest2);
            //}

        //------------------------------    create a file in Amazon.com-specific UIEE format    -------------
        private void buildAmazonISBNUIEEFile(FbDataReader dr)
        {
            string dataBuild;

            twRegAmazon.WriteLine("UR|" + dr.GetString((int)tBooks.BookNbr));  //  SKU

            if (dr.GetString((int)tBooks.Author).Length > 0)
                twRegAmazon.WriteLine("AA|" + dr.GetString((int)tBooks.Author));
            else
                twRegAmazon.WriteLine("AA|Unknown");

            twRegAmazon.WriteLine("TI|" + dr.GetString((int)tBooks.Title));
            if (dr.GetString((int)tBooks.Condn).Length > 0)
                twRegAmazon.WriteLine("CN|" + dr.GetString((int)tBooks.Condn));
            if (dr.GetString((int)tBooks.Illus).Trim().Length > 0)  //  illustrator
                twRegAmazon.WriteLine("AI|" + dr.GetString((int)tBooks.Illus));
            if (dr.GetString((int)tBooks.Cat).Length > 0)  //  catalog
            {
                if (dr.GetString((int)tBooks.Cat).Contains("-"))
                    twRegAmazon.WriteLine("MT|" + dr.GetString((int)tBooks.Cat));
                else
                    twRegAmazon.WriteLine("MT|Books/General");
            }
            if (dr.GetString((int)tBooks.Pub).Length > 0)
                twRegAmazon.WriteLine("PU|" + dr.GetString((int)tBooks.Pub));  //  publisher
            if (dr.GetString((int)tBooks.PubPlace).Length > 0)
                twRegAmazon.WriteLine("PP|" + dr.GetString((int)tBooks.PubPlace));  //  publisher location

            if (dr.GetString((int)tBooks.PubYear).Length > 0)
                twRegAmazon.WriteLine("DP|" + dr.GetString((int)tBooks.PubYear));  //  date published
            else
                twRegAmazon.WriteLine("DP|Unknown");

            if (dr[(int)tBooks.Ed] != DBNull.Value && dr.GetString((int)tBooks.Ed).Length > 0)
                twRegAmazon.WriteLine("ED|" + dr.GetString((int)tBooks.Ed));  //  edition

            if (dr.GetString((int)tBooks.Bndg).Length > 0)
            {
                switch (dr.GetString((int)tBooks.Bndg))  //  binding
                {
                    case "Hard Cover":
                    case "Hardcover":
                    case "Cloth":
                    case "Board Book":
                        twRegAmazon.WriteLine("BD|" + "hardcover");
                        break;
                    case "MMPB":
                    case "Mass Market Paperback":
                        twRegAmazon.WriteLine("BD|" + "pocket_book");
                        break;
                    case "Trade PB":
                    case "Paperback":
                        twRegAmazon.WriteLine("BD|" + "paperback");
                        break;
                    case "Leather":
                        twRegAmazon.WriteLine("BD|" + "leather_book");
                        break;
                    case "Spiral":
                        twRegAmazon.WriteLine("BD|" + "spiral_bound");
                        break;
                    case "Other":
                    default:
                        twRegAmazon.WriteLine("BD|" + "paperback");
                        break;
                }
            }

            if (dr.GetString((int)tBooks.Descr).Length > 0)
            {
                dataBuild = "NT|" + dr.GetString((int)tBooks.ISBN) + " ";  //  ISBN must be first entry in description...
                dataBuild += dr.GetString((int)tBooks.Descr);
                if (!dr.IsDBNull((int)tBooks.Signed))
                {
                    if (dr.GetString((int)tBooks.Signed) == "A")
                        dataBuild += ", Signed by Author";
                    else
                    {
                        if (dr.GetString((int)tBooks.Signed) == "I")
                            dataBuild += ", Signed by Illustrator";
                        else
                        {
                            if (dr.GetString((int)tBooks.Signed) == "B")
                                dataBuild += ", Signed by Author and Illustrator";
                        }
                    }
                }
                twRegAmazon.WriteLine(dataBuild);  //  write out description
            }
            if (dr.GetString((int)tBooks.Keywds).Length > 0)
                twRegAmazon.WriteLine("KE|" + dr.GetString((int)tBooks.Keywds));
            if (dr.GetDecimal((int)tBooks.Price).ToString().Length > 0)
                twRegAmazon.WriteLine("PR|" + dr.GetDecimal((int)tBooks.Price).ToString("####.##"));
            if (dr.GetString((int)tBooks.NbrOfCopies).Length > 0)
                twRegAmazon.WriteLine("CO|" + dr.GetString((int)tBooks.NbrOfCopies));

            switch (dr.GetString((int)tBooks.TranC))
            {
                case "A":
                    twRegAmazon.WriteLine("XB|1");  //  For Sale
                    break;
                case "U":
                    if (int.Parse(dr.GetString((int)tBooks.NbrOfCopies)) == 0)
                        twRegAmazon.WriteLine("XB|2");  //  Sold
                    else
                        twRegAmazon.WriteLine("XB|1");  //  just updated... still for sale
                    break;
                case "-":
                default:
                    if (int.Parse(dr.GetString((int)tBooks.NbrOfCopies)) > 0)
                        twRegAmazon.WriteLine("XB|1");  //  For Sale
                    else
                        twRegAmazon.WriteLine("XB|2");  //  Sold
                    break;
            }

            twRegAmazon.WriteLine("XD|S");  //  database code
            twRegAmazon.WriteLine(Environment.NewLine);

            return;
        }


        //--------------------------------    build an amazon.com non-ISBN UIEE file    ------------------------------------
        public void buildAmazonNonISBNUIEEFile(FbDataReader dr)
        {

            string dataBuild;

            twStdAmazon.WriteLine("UR|" + dr.GetString((int)tBooks.BookNbr));  //  SKU

            if (dr.GetString((int)tBooks.Author).Length > 0)
                twStdAmazon.WriteLine("AA|" + dr.GetString((int)tBooks.Author));
            else
                twStdAmazon.WriteLine("AA|Unknown");

            twStdAmazon.WriteLine("TI|" + dr.GetString((int)tBooks.Title));
            if (dr.GetString((int)tBooks.Condn).Length > 0)
                twStdAmazon.WriteLine("CN|" + dr.GetString((int)tBooks.Condn));
            if (dr.GetString((int)tBooks.Illus).Trim().Length > 0)  //  illustrator
                twStdAmazon.WriteLine("AI|" + dr.GetString((int)tBooks.Illus));
            if (dr.GetString((int)tBooks.Cat).Length > 0)  //  catalog
            {
                if (dr.GetString((int)tBooks.Cat).Contains("-"))
                    twStdAmazon.WriteLine("MT|" + dr.GetString((int)tBooks.Cat));
                else
                    twStdAmazon.WriteLine("MT|Books/General");
            }
            if (dr.GetString((int)tBooks.Pub).Length > 0)
                twStdAmazon.WriteLine("PU|" + dr.GetString((int)tBooks.Pub));  //  publisher
            if (dr.GetString((int)tBooks.PubPlace).Length > 0)
                twStdAmazon.WriteLine("PP|" + dr.GetString((int)tBooks.PubPlace));  //  publisher location

            if (dr.GetString((int)tBooks.PubYear).Length > 0)
                twStdAmazon.WriteLine("DP|" + dr.GetString((int)tBooks.PubYear));  //  date published
            else
                twStdAmazon.WriteLine("DP|Unknown");

            if (dr[(int)tBooks.Ed] != DBNull.Value && dr.GetString((int)tBooks.Ed).Length > 0)
                twStdAmazon.WriteLine("ED|" + dr.GetString((int)tBooks.Ed));  //  edition

            if (dr.GetString((int)tBooks.Bndg).Length > 0)
            {
                switch (dr.GetString((int)tBooks.Bndg))  //  binding
                {
                    case "Hard Cover":
                    case "Hardcover":
                    case "Cloth":
                    case "Board Book":
                        twStdAmazon.WriteLine("BD|" + "hardcover");
                        break;
                    case "MMPB":
                    case "Mass Market Paperback":
                        twStdAmazon.WriteLine("BD|" + "pocket_book");
                        break;
                    case "Trade PB":
                    case "Paperback":
                        twStdAmazon.WriteLine("BD|" + "paperback");
                        break;
                    case "Leather":
                        twStdAmazon.WriteLine("BD|" + "leather_book");
                        break;
                    case "Spiral":
                        twStdAmazon.WriteLine("BD|" + "spiral_bound");
                        break;
                    case "Other":
                    default:
                        twStdAmazon.WriteLine("BD|" + "paperback");
                        break;
                }
            }
            if (dr.GetString((int)tBooks.Descr).Length > 0)
            {
                dataBuild = "NT|" + dr.GetString((int)tBooks.Descr);
                if (!dr.IsDBNull((int)tBooks.Signed))
                {
                    if (dr.GetString((int)tBooks.Signed) == "A")
                        dataBuild += ", Signed by Author";
                    else
                    {
                        if (dr.GetString((int)tBooks.Signed) == "I")
                            dataBuild += ", Signed by Illustrator";
                        else
                        {
                            if (dr.GetString((int)tBooks.Signed) == "B")
                                dataBuild += ", Signed by Author and Illustrator";
                        }
                    }
                }
                twStdAmazon.WriteLine(dataBuild);  //  write out description
            }
            if (dr.GetString((int)tBooks.Keywds).Length > 0)
                twStdAmazon.WriteLine("KE|" + dr.GetString((int)tBooks.Keywds));
            if (dr.GetDecimal((int)tBooks.Price).ToString().Length > 0)
                twStdAmazon.WriteLine("PR|" + dr.GetDecimal((int)tBooks.Price).ToString("####.##"));
            if (dr.GetString((int)tBooks.NbrOfCopies).Length > 0)
                twStdAmazon.WriteLine("CO|" + dr.GetString((int)tBooks.NbrOfCopies));

            switch (dr.GetString((int)tBooks.TranC))
            {
                case "A":
                    twStdAmazon.WriteLine("XB|1");  //  For Sale
                    break;
                case "U":
                    if (int.Parse(dr.GetString((int)tBooks.NbrOfCopies)) == 0)
                        twStdAmazon.WriteLine("XB|2");  //  Sold
                    else
                        twStdAmazon.WriteLine("XB|1");  //  updated...
                    break;
                case "-":
                default:
                    if (int.Parse(dr.GetString((int)tBooks.NbrOfCopies)) > 0)
                        twStdAmazon.WriteLine("XB|1");  //  For Sale
                    else
                        twStdAmazon.WriteLine("XB|2");  //  Sold
                    break;
            }

            twStdAmazon.WriteLine("XD|S");  //  database code
            twStdAmazon.WriteLine(Environment.NewLine);

            return;
        }
#endif

#if false
            #region MyRegion
		    string addModifyDeleteURL = @"https://secure.amazon.com/exec/panama/seller-admin/catalog-upload/add-modify-delete";
            string purgeAndReplace = @"https://secure.amazon.com/exec/panama/seller-admin/catalog-upload/purge-replace";
            string UKaddModifyDeleteURL = @"https://secure.amazon.co.uk/exec/panama/seller-admin/catalog-upload/add-modify-delete";
            string UKpurgeAndReplace = @"https://secure.amazon.co.uk/exec/panama/seller-admin/catalog-upload/purge-replace";


            string uploadFilename1 = "";
            string uploadFilename2 = "";

            //Prepare the cookies
            CookieCollection cookies = new CookieCollection();
            CookieContainer cookieContainer = new CookieContainer();

            cookies.Add(new Cookie("x-main", "YvjPkwfntqDKun0QEmVRPcTTZDMe?Tn?"));
            cookies.Add(new Cookie("ubid-main", "002-8989859-9917520"));
            cookies.Add(new Cookie("ubid-tacbus", "019-5423258-4241018"));
            cookies.Add(new Cookie("x-tacbus", "vtm4d53DvX@Sc9LxTnAnxsFL3DorwxJa"));
            cookies.Add(new Cookie("ubid-tcmacb", "087-8055947-0795529"));
            cookies.Add(new Cookie("ubid-ty2kacbus", "161-5477122-2773524"));
            cookies.Add(new Cookie("session-id", "087-178254-5924832"));
            cookies.Add(new Cookie("session-id-time", "950660664"));

            cookieContainer.Add(new Uri(@"https://secure.amazon.com"), cookies);

            int x = 0;
            string[] fileNameParts = args[2].Split('\\');
            for (x = 0; x < fileNameParts.Length; x++)
                uploadFilename1 += fileNameParts[x] + @"\";
            uploadFilename1 = uploadFilename1.Substring(0, uploadFilename1.Length - 1);

            //        uploadFilename = uploadFilename.Replace("HB", "AZ");
            uploadFilename1 = fileNameParts[0] + @"\" + fileNameParts[1] + @"\" + fileNameParts[2] + @"\" + fileNameParts[3].Replace("HB", "AZisbn");
            uploadFilename2 = fileNameParts[0] + @"\" + fileNameParts[1] + @"\" + fileNameParts[2] + @"\" + fileNameParts[3].Replace("HB", "AZnoisbn");

            //  get length of input file with ISBNs
            FileInfo fi = new FileInfo(uploadFilename1);
            if (!fi.Exists) { //  does file exist?
                MessageBox.Show("File " + uploadFilename1[0] + " is missing; did you change the export path?", "Prager Book Inventory Manager", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return -1;
            }

            HttpWebRequest myRequest = null;
            if (args[2].Contains("purge")) { //  are we doing a purge (as noted in the filename)?
                if (cbUploadAmazonUK.Checked == true)
                    myRequest = (HttpWebRequest)WebRequest.Create(UKpurgeAndReplace);
                else
                    myRequest = (HttpWebRequest)WebRequest.Create(purgeAndReplace);
            }
            else {
                if (cbUploadAmazonUK.Checked == true)
                    myRequest = (HttpWebRequest)WebRequest.Create(UKaddModifyDeleteURL);
                else
                    myRequest = (HttpWebRequest)WebRequest.Create(addModifyDeleteURL);
            }

            myRequest.Method = "POST";
            myRequest.Headers.Add("Authorization: Basic " + EncodeBase64(args[0] + ":" + args[1]));
            myRequest.ContentType = "text/xml";
            myRequest.Timeout = 600000;
            myRequest.KeepAlive = false;
            myRequest.CookieContainer = cookieContainer;

            //  additional parameters 
            myRequest.Headers.Add("UploadFor", "Marketplace");
            myRequest.Headers.Add("FileFormat", "TabDelimited");
            myRequest.Headers.Add("email", "Y");  //  send email confirmation of upload


            int fileLength = (int)fi.Length;
            if (fileLength > 0) {
                myRequest.ContentLength = fileLength + 2;  //  set length of data

                Stream reqStream = myRequest.GetRequestStream();  //  get a request stream
                FileStream rdr = new FileStream(uploadFilename1, FileMode.Open, FileAccess.Read);

                //  read the data and put it into the request buffer
                byte[] inData = new byte[fileLength];
                byte[] crLF = { 13, 10 };

                int bytesRead = rdr.Read(inData, 0, fileLength);
                reqStream.Write(inData, 0, bytesRead);
                reqStream.Write(crLF, 0, 2);
                rdr.Close();
                reqStream.Close();

                lbUploadStatus.Items.Insert(0, "upload of file: " + uploadFilename1 + " to Amazon.com started");
                lbUploadStatus.Refresh();

                uploadToAmazon(myRequest);
            }

            //  get length of input file with non-ISBNs
            fi = new FileInfo(uploadFilename2);
            if (!fi.Exists) {  //  does file exist?
                MessageBox.Show("File " + uploadFilename2 + " is missing; did you change the export path?", "Prager Book Inventory Manager", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return -1;
            }

            HttpWebRequest myRequest2 = null;
            //if (args[2].Contains("purge"))  //  are we doing a purge (as noted in the filename)?  (removed - we've already done the purge, so don't do it again)
            //    myRequest2 = (HttpWebRequest)WebRequest.Create(purgeAndReplace);
            //else
            myRequest2 = (HttpWebRequest)WebRequest.Create(addModifyDeleteURL);

            myRequest2.Method = "POST";
            myRequest2.Headers.Add("Authorization: Basic " + EncodeBase64(args[0] + ":" + args[1]));
            myRequest2.ContentType = "text/xml";
            myRequest2.Timeout = 600000;
            myRequest2.KeepAlive = false;
            myRequest2.CookieContainer = cookieContainer;

            //  additional parameters 
            myRequest2.Headers.Add("UploadFor", "Marketplace");
            myRequest2.Headers.Add("FileFormat", "TabDelimited");
            myRequest2.Headers.Add("email", "Y");  //  send email confirmation of upload

            fileLength = (int)fi.Length;
            if (fileLength > 0) {
                myRequest2.ContentLength = fileLength + 2;  //  set length of data

                Stream reqStream = myRequest2.GetRequestStream();  //  get a request stream
                FileStream rdr = new FileStream(uploadFilename2, FileMode.Open, FileAccess.Read);

                //  read the data and put it into the request buffer
                byte[] inData = new byte[fileLength];
                byte[] crLF = { 13, 10 };

                int bytesRead = rdr.Read(inData, 0, fileLength);
                reqStream.Write(inData, 0, bytesRead);
                reqStream.Write(crLF, 0, 2);
                rdr.Close();
                reqStream.Close();

                lbUploadStatus.Items.Insert(0, "upload of file: " + uploadFilename2 + " to Amazon.com started");
                lbUploadStatus.Refresh();

                uploadToAmazon(myRequest2);
            }

            return 0;
            #endregion
            return 0;
        }


        //------------------------    call the Amazon.com upload routine    ---------------------------|
        private int uploadToAmazon(HttpWebRequest myRequest) {

            string line;
            HttpWebResponse myHttpWebResponse = null;

            try {
                myHttpWebResponse = (HttpWebResponse)myRequest.GetResponse();

                Stream streamResponse = myHttpWebResponse.GetResponseStream();
                StreamReader streamRead = new StreamReader(streamResponse);

                while ((line = streamRead.ReadLine()) != null) {
                    Regex r = new Regex(@"<Success>SUCCESS");  //  was it clean?
                    if (r.IsMatch(line))
                        lbUploadStatus.Items.Insert(0, "upload to Amazon was successful");
                    else {
                        r = new Regex(@"<FileError>");  // file error?
                        if (r.IsMatch(line))
                            lbUploadStatus.Items.Insert(0, "upload to Amazon failed - FileError ");
                        else {
                            r = new Regex(@"<BusinessLogicError>");  //  what kind of error?
                            m = r.Match(line);
                            if (m.Success) {
                                r1 = new Regex(@"</BusinessLogicError>");  //  find the end...
                                m1 = r1.Match(line);
                                if (m1.Success) {
                                    int len = m1.Index - m.Index - 20;
                                    lbUploadStatus.Items.Insert(0, "upload to Amazon failed: " + line.Substring(20, len));
                                }
                            }
                        }
                    }

                    lbUploadStatus.Refresh();
                }
            }
            catch (Exception ex) {
                MessageBox.Show("Error during upload to Amazon.com: " + ex.Message, "Prager Book Inventory Manager", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return -1;
            }
            return 0;
        }


        //---------------------------------------------------------------------------------------------------------|
        static string EncodeBase64(string data) {
            return Convert.ToBase64String(System.Text.Encoding.ASCII.GetBytes(data));
        }
#endif


from get prices

                ////  now get the medium data
                //if (cbShowImage != null && cbShowImage.Checked == true)  <-----------------------  TODO
                //{
                //    string url = "";
                //    XmlNodeList image = doc.GetElementsByTagName("MediumImage");
                //    foreach (XmlNode node in image)
                //    {
                //        XmlElement bookElement = (XmlElement)node;
                //        url = bookElement.GetElementsByTagName("URL")[0].InnerText;
                //        bookImage.ImageLocation = url;  //  show the image
                //    }

                //    HttpWebRequest webRequestPic = (HttpWebRequest)WebRequest.Create(url);  
                //    WebResponse picResponse = webRequestPic.GetResponse();
                //    int length = (int)picResponse.ContentLength;

                //    Stream picstr = picResponse.GetResponseStream();   // The picture is in this stream, so we can save it now to hd

                //    using (BinaryReader br = new BinaryReader(picstr))
                //    {
                //        byte[] buffer = br.ReadBytes(length);  //  convert the stream to a byte array
                //       // File.WriteAllBytes(@"j:\temp\picfile.jpg", buffer);  //  write the image to a file  <------------------------------------- TODO
                //    }
                //}


        //---------------------------------    remove ISBNs from Description field    --------------------------------
        //public void removeISBNs() {

        //    string newDescription = "";
        //    string newISBN = "";
        //    string newKeywds = "";
        //    string BookNbr = "";
        //    int bookCount = 0;
        //    bool foundIt = false;
        //    FbConnection tempConn = new FbConnection("server=" + serverInstance + @"\SQLEXPRESS;Max Pool Size=500; Integrated security=SSPI;database=" + dataBaseName);

        //    Cursor.Current = Cursors.WaitCursor;
        //    lbStatus.Items.Insert(0, "removal of ISBNs started");
        //    lbStatus.Refresh();
        //    tabTaskPanel.SelectedIndex = cStatus;

        //    //   backupDatabase();  //  just in case....

        //    if (bookConn.State == ConnectionState.Closed)
        //        bookConn.Open();

        //    FbDataReader rdr = null;
        //    commandString = "SELECT BookNbr, Descr, Keywds from tBooks";
        //    FbCommand selectCmd = new FbCommand(commandString, bookConn);

        //    //  read book inventory
        //    rdr = selectCmd.ExecuteReader();
        //    while (rdr.Read()) {
        //        //  initialize
        //        foundIt = false;
        //        BookNbr = (string)rdr[0];
        //        newKeywds = (string)rdr[2];
        //        newISBN = "";
        //        newDescription = (string)rdr[1];

        //        //  find the ISBN in the Keywds field
        //        string workingKWords = (string)rdr[2];
        //        string[] tempArray;

        //        if (workingKWords.Length > 13) {
        //            Match m = Regex.Match(workingKWords.Substring(workingKWords.Length - 10, 10), "[0-9]{10}$");
        //            if (m.Success) {
        //                newKeywds = workingKWords.Substring(0, workingKWords.Length - 10);  //  remove the ISBN
        //                newISBN = workingKWords.Substring(workingKWords.Length - 10, 10);  //  put it here....
        //                foundIt = true;
        //            }
        //            else {
        //                m = Regex.Match(workingKWords.Substring(workingKWords.Length - 13, 13), @"[0-9]-");
        //                if (m.Success) {
        //                    tempArray = workingKWords.Substring(workingKWords.Length - 13, 13).Split('-');
        //                    if (tempArray.Length == 4) {
        //                        newKeywds = workingKWords.Substring(0, workingKWords.Length - 13);  //  remove the ISBN
        //                        newISBN = workingKWords.Substring(workingKWords.Length - 13, 13).Replace("-", "");  //  put it here....
        //                        foundIt = true;
        //                    }
        //                }

        //            }
        //        }

        //        string workingDesc = (string)rdr[1];
        //        if (workingDesc.Length > 10 && foundIt == false) {
        //            m = Regex.Match(workingDesc, "ISBN:+[0-9]");
        //            if (m.Success) {
        //                newISBN = workingDesc.Substring(m.Index + 5, 13);  //  pick it out...
        //                m1 = Regex.Match(newISBN, "-");
        //                if (m1.Success) {
        //                    newISBN = newISBN.Replace("-", "");
        //                    newDescription = workingDesc.Substring(0, m.Index) + workingDesc.Substring(m.Index + 19, workingDesc.Length - m.Index - 19);
        //                    foundIt = true;
        //                }
        //            }
        //        }

        //        //  update the record
        //        string updateString = "";
        //        FbCommand tempCmd;
        //        if (foundIt) {
        //            newKeywds = newKeywds.Replace("'", "''");
        //            newDescription = newDescription.Replace("'", "''");

        //            try {
        //                updateString = "UPDATE tBooks SET Descr = '" + newDescription + "', ISBN = '" +
        //                      newISBN + "', Keywds = '" + newKeywds.Trim() + "' WHERE BookNbr = '" + BookNbr + "'";
        //                tempCmd = new FbCommand(updateString, tempConn);
        //                if (tempConn.State == ConnectionState.Closed)
        //                    tempConn.Open();

        //                tempCmd.ExecuteNonQuery();
        //                bookCount++;
        //            }
        //            catch (System.Exception ex) {
        //                MessageBox.Show("Error updating record: " + ex.Message + "\n" + ex.StackTrace);
        //            }
        //        }
        //    }
        //    if (!rdr.IsClosed)
        //        rdr.Close();

        //    lbStatus.Items.Insert(0, "removal of " + bookCount.ToString() + " ISBNs ended");
        //    lbStatus.Refresh();
        //    tabTaskPanel.SelectedIndex = cStatus;

        //    //createCommandString();
        //    //fillListViewPanel(commandString);  //  fill the tBooks datagridview

        //    Cursor.Current = Cursors.Default;
        //}


        -  fixed: several Main Menu Help links were broken  (11.5.3)
        -  added: message when getting prices from Amazon and an error is returned  (11.5.3)
        -  changed:  hid informational comments on Amazon keys  (11.5.3)
        -  added: progress bar during initialization (11.5.3)
        -  fixed:  Inclusive search (11.5.3)
        -  changed:  removed Google due to complex setup (11.5.3)
        -  added:  option when adding a book, and it already exists, add 1 to Quantity (11.5.3)

         -  changed:  Amazon uploads to conform to Amazon's mandate (11.5.0)
         -  added: message about new website pages (11.5.0)
         -  added:  ability to change Custom Site names from Upload page  (11.5.0)
         -  changed:  for ABE exports, removed Shipping info from Description field (11.5.0)
         -  added:  message when Book Conditions are missing  (11.5.0)
         -  added:  for Amazon uploads, copies the Submission ID to the clipboard (11.5.0)
         -  changed:  get prices from Amazon to conform to Amazon's new API  (11.5.0)
         -  fixed:  system crash when error returned from getting book info (11.5.0)
         -  added:  volume information for Amazon uploads  (11.5.0)
         -  added: logic to support annual license fee (11.5.0)
         -  corrected:  Accounting totals now take quantity into consideration (11.5.0)
         -  added: with locale as UK, now able to upload the Amazon.co.uk  (11.5.0)

        -  added:  for Amazon export, convert USD using current exchange rates (11.4.2)
        -  fixed:  B & N was not initialized on Upload page  (11.4.2)
        -  changed: usign Get Info, if Not Found using ISBN, will try again using ASIN  (11.4.2)
        -  changed: the way program finds Firebird installation path (11.4.2)
        -  fixed:  error when GUID already set (11.4.1)
        -  changed: when adding a book, Add button no longer will turn red (11.4.1)
        -  fixed: when adding a book, selecting catalogs causes both Update and Add buttons to turn red (11.4.1)
        -  fixed:  locale error in initialization routines  (11.4.1)
        -  fixed: license screen messages which were not visible  (11.4.0)
        -  changed: no longer populate Edition from Amazon when getting book info (11.4.0)
        -  added:  option to populate Description field when getting book info  (11.4.0)
        -  added:  int'l shipping to Description field of ABE export files (11.4.0)
        -  changed:  enhanced Export page, adding listing of books that were exported (11.4.0)
        -  changed:  removed option to NOT backup database when exiting (11.4.0)
        -  changed:  improved database maintenance; added GUID field (11.4.0)
        -  fixed:  when number of copies is missing, default is now zero, and warning is given when selected (11.3.11)
        -  fixed:  get book info using ASIN; picked up "description" (11.3.11)
        -  fixed:  book condition export file to ABE now allows for "collectible" (11.3.10)
        -  fixed:  import of tab-delimited file containing single quotes in location caused crash (11.3.9)
        -  fixed:  Amazon purge/replace would purge again when processing non-ISBN file (11.3.8)
        -  fixed:  database maintenance error  (11.3.7)
        -  fixed:  missing time period on Sales Report causes crash (11.3.6)
        -  added:  indicator for which sites have no monthly charge (11.3.6)
        -  removed:  A1Books (bankrupt)  (11.3.6)
        -  added: new file names to export file cleanup (11.3.6)
        -  fixed:  Valore filename for uploads (11.3.5)
        -  fixed:  displayed file type in UserIDs and Passwords tab for Valore uploads (11.3.5)
        -  fixed:  ABE filename when doing an export (11.3.5)
        -  fixed:  license issue  (11.3.4)
        -  added: message to re-start the program when user id and password are initially created for the database (11.3.3)
        -  upgraded: database engine (11.3.3)
        -  changed: message regarding Custom and Generic conditions for Amazon and ABE uploads (11.3.3)
        -  fixed:  Inventory report would not print what was shown in Database panel (11.3.2)
        -  changed: apostrophe in customer billing address would cause crash (11.3.2)
        -  added: publication year and sales rank to ASIN report (11.3.1)
        -  changed: tabs are now on two rows (11.3.0)
        -  changed:  size of the main window is now larger (11.3.0)
        -  fixed:  missing customer number in invoices (11.2.5)
        -  fixed:  single apostrophe in customer name causes crash (11.2.5)
        -  removed: 10-digit to 13-digit ISBN conversion from Mass Changes page (11.2.5)
        -  fixed:  program crash when updating invoice records (11.2.4)
        -  fixed:  uploaded conditions when using Amazon conditions (11.2.3)
        -  fixed:  when changing bindings options, they were not being refreshed immediately  (11.2.3)
        -  added: warning message about skipping rows on Canned Text  (11.2.3)
        -  changed:  error message when upload file is missing on Amazon upload (11.2.3)
        -  added:  tab mapping for BookTrakker imports  (11.2.2)
        -  changed:  default accounting year to 2011  (11.2.2)
        -  added:  give user the option to clear the user id's and passwords   (11.2.2)
        -  fixed:  Amazon upload filenames (11.2.1)
         -  changed:  date for database purge to "last date updated" (11.2.0)
         -  fixed:  moved Inventory.cfg to proper folder (11.2.0)
         -  fixed:  purge books from database (11.1.1)
         -  fixed:  sometimes Keywords are full of blanks  (11.1.1)
         -  fixed:  apostrophe in Notes field would cause rejection during Add/Update (11.1.1)
         -  changed:  new file format for ABE  (11.1.0)
         -  changed:  file formats from HomeBase to UIEE for B & N, Biblio, Biblion, Bibliophile  (11.1.0)
         -  changed: repricing routines now use Amazon.com due to legal reasons (11.0.3)
         -  fixed: inventory report was taking too long to process large files (11.0.3)
         -  fixed: search routines when object selected but no search criteria (11.0.3)
         -  removed database maintenance (deprecated) (11.0.2)
        -  code refresh
        -  fixed:  inclusive search with no selection would cause crash  (11.0.1)



		                    //numberOfOffers = int.Parse(bookElement.GetElementsByTagName("TotalOffers")[0].InnerText);
                    //ndx1 = numberOfOffers;
                    //numberOfPages = int.Parse(bookElement.GetElementsByTagName("TotalOfferPages")[0].InnerText);
                    //numberOfPages = numberOfPages > 100 ? 100 : numberOfPages;  //  limit to 100 pages...
                }

                //do  //  fill ArrayList with the info from the XML file
                //{
                //    XmlNodeList sellerInfo = doc.GetElementsByTagName("Offer");
                //    int i = 0;
                //    foreach (XmlNode offer in sellerInfo) {
                //        sData sD = new sData();  //  one for each seller

                //        if (doc.GetElementsByTagName("SellerId")[i] != null)
                //            sD.alVenueName = doc.GetElementsByTagName("SellerId")[i].InnerText.ToString();
                //        else if (doc.GetElementsByTagName("MerchantId")[i] != null)
                //            sD.alVenueName = doc.GetElementsByTagName("MerchantId")[i].InnerText.ToString();
                //        else
                //            sD.alVenueName = "unknown";

                //        sD.alPrice = doc.GetElementsByTagName("FormattedPrice")[i].InnerText.Replace("$", "");
                //        sD.alCondn = char.Parse(doc.GetElementsByTagName("Condition")[i++].InnerText.ToLower().Substring(0, 1));

                //        alData.Add(sD);
                //    }

                    //  now, get the more offers page
            //        if (ISBN.Substring(0, 1).ToLower() != "b")  {  //  it's an ISBN
            //            if (bookCondn == 'n')  //  only new
            //                requestString =
            //                        "Service=AWSECommerceService&Version=2011-08-01&Operation=ItemLookup" +
            //                        "&ItemId=" + ISBN + "&AssociateTag=" + AssocTag + 
            //                        "&IdType=ISBN&Condition=New&OfferPage=" + ++pageCounter +
            //                        "&SearchIndex=Books&MerchantId=All&ResponseGroup=Offers";
            //            else if (bookCondn == 'u')  //  only used
            //                requestString =
            //                      "Service=AWSECommerceService&Version=2011-08-01&Operation=ItemLookup" +
            //                       "&ItemId=" + ISBN + "&AssociateTag=" + AssocTag + 
            //                       "&IdType=ISBN&Condition=Used&OfferPage=" + ++pageCounter +
            //                       "&SearchIndex=Books&MerchantId=All&ResponseGroup=Offers";
            //            else if (bookCondn == 'b')  //  get new and used
            //                requestString =
            //                        "Service=AWSECommerceService&Version=2011-08-01&Operation=ItemLookup" +
            //                        "&ItemId=" + ISBN + "&AssociateTag=" + AssocTag + 
            //                        "&IdType=ISBN&Condition=All&OfferPage=" + ++pageCounter +
            //                        "&SearchIndex=Books&MerchantId=All&ResponseGroup=Offers";
            //        }
            //        else {
            //            if (bookCondn == 'n')  //  only new
            //                requestString =
            //                        "Service=AWSECommerceService&Version=2011-08-01&Operation=ItemLookup" +
            //                        "&ItemId=" + ISBN + "&AssociateTag=" + AssocTag + 
            //                        "&IdType=ASIN&Condition=New&OfferPage=" + ++pageCounter +
            //                        "&MerchantId=All&ResponseGroup=Offers";
            //            else if (bookCondn == 'u')  //  only used
            //                requestString =
            //                        "Service=AWSECommerceService&Version=2011-08-01&Operation=ItemLookup" +
            //                        "&ItemId=" + ISBN + "&AssociateTag=" + AssocTag + 
            //                        "&IdType=ASIN&Condition=Used&OfferPage=" + ++pageCounter +
            //                        "&MerchantId=All&ResponseGroup=Offers";
            //            else if (bookCondn == 'b')  //  get new and used
            //                requestString =
            //                      "Service=AWSECommerceService&Version=2011-08-01&Operation=ItemLookup" +
            //                       "&ItemId=" + ISBN + "&AssociateTag=" + AssocTag + 
            //                       "&IdType=ASIN&Condition=All&OfferPage=" + ++pageCounter +
            //                       "&MerchantId=All&ResponseGroup=Offers";
            //        }

            //        // get the response object
            //        SignedRequestHelper helper2 = new SignedRequestHelper(AWSKey, AWSSecretKey, "webservices.amazon.com");
            //        requestURL = helper2.Sign(requestString);
            //        request = HttpWebRequest.Create(requestURL);

            //        response = (HttpWebResponse)request.GetResponse();

            //        // to read the contents of the file, get the ResponseStream
            //        sr = new StreamReader(response.GetResponseStream());
            //        replyFromHost = sr.ReadToEnd();

            //        //  now read the initial XML data returned by Amazon.com
            //        doc.LoadXml(replyFromHost);

            //    }  while (pageCounter <= numberOfPages);

            //    //  now, put the elements in the dictionary...  
            //    alData.Sort(new SDataComparer());  //  sort the struct's

            //    // do stuff with stuff.alVenueName
            //    sData stuff;
            //    for (int k = 0; k < alData.Count; k++) {
            //        mainForm.pricingData pD = new mainForm.pricingData();  //  new instance
            //        stuff = (sData)(alData[k]);
            //        pD.venueName = stuff.alVenueName;
            //        pD.price = stuff.alPrice;
            //        pD.bookCondn = stuff.alCondn;

            //        string key = stuff.alVenueName + "." + stuff.alPrice + "." + stuff.alCondn;
            //        if (!bD.bookList.ContainsKey(key))  //  if the vendor/price key is same, drop it...
            //            bD.bookList.Add(key, pD);
            //    }
            //    bD.ISBN = ISBN;
            //}
            //catch (WebException ex) {
            //    MessageBox.Show("Error from AWS: " + ex.Message, "Prager Book Inventory Manager", MessageBoxButtons.OK, MessageBoxIcon.Error);
            //    return false;

            //}


			=================================    from asin.cs    =============================================
			            //// Create a navigator to query with XPath.
            //nav = docNav.CreateNavigator();

            //if (nav.ToString().Contains("NoMatchFound")) {
            //    tbasin.Text = "        No match found.";
            //    tbasin.ForeColor = Color.Firebrick;

            //    int x = dbpIndex[0];
            //    if (dbp.Items.Count > dbpIndex[0] + 1)  //  if count of rows is > current selected row + 1...
            //        dbp.Items[dbpIndex[0] + 1].EnsureVisible();  //  bump it and display it...
            //    return;
            //}

            //nav.MoveToRoot();
            //nav.MoveToFirstChild();
            //nav.MoveToFirstChild();
            //nav.MoveToNext();

            //// We are now at the items node
            //nav.MoveToFirstChild();
            //nav.MoveToNext();
            //nav.MoveToNext();  //  this takes us to totalPages
            //nav.MoveToNext();  //  this should take us to "Item"


            //string tempPrice = "";
            //int tempPriceIndx = 0;

            //nav.MoveToFirstChild();

            //do {
            //    switch (nav.Name)  //  we are now within the "Item" element
            //    {
            //        case "ASIN":
            //            sD.ASIN = nav.Value;
            //            nav.MoveToNext();
            //            xx = nav.Name;  //  takes me to "DetailPageURL"
            //            nav.MoveToNext();
            //            xx = nav.Name;  //  takes me to "SalesRank"
            //            break;
            //        case "ItemAttributes":
            //            nav.MoveToFirstChild();
            //            do {
            //                switch (nav.Name) {
            //                    case "Author":
            //                        sD.Author = nav.Value;
            //                        break;
            //                    case "Binding":
            //                        sD.Binding = nav.Value;
            //                        break;
            //                    case "Publisher":
            //                        sD.Publisher = nav.Value;
            //                        break;
            //                    case "PublicationDate":
            //                        sD.Year = nav.Value;
            //                        break;
            //                    case "Title":
            //                        sD.Title = nav.Value;
            //                        break;
            //                    default:
            //                        break;
            //                }
            //            } while (nav.MoveToNext() == true);

            //            nav.MoveToParent();  //  up one level to "ItemAttributes"
            //            xx = nav.Name;
            //            nav.MoveToNext();  //  next parent ("OfferSummary")
            //            xx = nav.Name;
            //            break;
            //        case "SalesRank":
            //            sD.Rank = nav.Value;
            //            nav.MoveToNext();
            //            xx = nav.Name;  //  takes me to "SmallImage"
            //            break;
            //        case "OfferSummary":
            //            nav.MoveToFirstChild();
            //            xx = nav.Name;
            //            do {
            //                switch (nav.Name) {
            //                    case "LowestUsedPrice":
            //                        tempPrice = nav.Value;
            //                        tempPriceIndx = tempPrice.IndexOf("$");
            //                        sD.Min = tempPrice.Substring(tempPriceIndx, tempPrice.Length - tempPriceIndx);
            //                        break;
            //                    case "TotalUsed":
            //                        sD.Count = nav.Value;
            //                        break;
            //                    default:
            //                        break;
            //                }
            //            } while (nav.MoveToNext() == true);

            //            alData.Add(sD);

            //            xx = nav.Name;
            //            nav.MoveToParent();  //  should put me at "OfferSummary"
            //            xx = nav.Name;
            //            nav.MoveToParent();  //  should put me at next "Item"
            //            xx = nav.Name;
            //            if (nav.MoveToNext() == false) {
            //                doneFlag = true;
            //                break;
            //            }
            //            nav.MoveToFirstChild();  //  this points me to "ASIN"
            //            xx = nav.Name;
            //            break;
            //        default:
            //            nav.MoveToNext();
            //            xx = nav.Name;
            //            break;
            //    }

            //} while (doneFlag == false);

			------------------------------------------------------------------------

			
        ////------------------------------------------------------------------------------------------------------
        //private string getComments(string URL)
        //{
        //    //  drill down to get the comments from each seller
        //    string commentsPage = getCommentsPage(findSellersURL(URL));  // the URL from the DetailPageURL gives this page ("Available from..." below...  so for each item above, there will be one seller...
        //    parseCommentsPage(commentsPage);  //  parse each of the comments into a separate array
        //    return (string)alComments[0];
        //}

        ////-------------------------------    go to the list of sellers URL    ------------------------------------------
        //private string findSellersURL(string URL)
        //{
        //    string url = "";

        //    //  this is the url given on the page from the URL passed to this method... passing this to 'getComments' will bring up the seller's comments for parsing
        //    //  <span class="availGreen">Available from <a href="http://www.amazon.com/gp/offer-listing/B000PV0YK0/ref=dp_olp_0?ie=UTF8&condition=all" class="buyAction">these sellers</a>.</span><br />

        //    string page = readWebPage(URL);  //  get the page

        //    //  parse 'page' for URL and return it
        //    r = new Regex(">Available from <a href=");
        //    m = r.Match(page, 0);
        //    if (m.Success)
        //    {
        //        r1 = new Regex("class=");
        //        m1 = r1.Match(page, m.Index + 26);
        //    }
        //    if (m1.Success)
        //        url = page.Substring(m.Index + 25, m1.Index - m.Index - 27);

        //    return url;
        //}


        ////--------------------------    get the 'comments' from the seller's listing    ------------------------------------
        //private string getCommentsPage(string URL)
        //{
        //    string page = readWebPage(URL);
        //    return page;
        //}


        ////-----------------------------------    parse web page for the comments field    -------------------------------------------
        //private void parseCommentsPage(string webdata)
        //{
        //    //  start ->  <strong>Comments:&nbsp;</strong>&nbsp;
        //    //  end ->  <span class="caretnext">&#187</span> or </div> 
        //    //  data ->  Comments:   1970 KNOPF dust jacker has some edge wear blue cloth cover with gold lettering excellent, inside book very clean, Excelle... ( » more )
        //    //                                                                                                                                                                                                                                                                           ^  (  <span class="caretnext">&#187</span>
        //    //  otherwise, if length is less than x, </div> signifies the end

        //    /*
        //     * http://www.devhood.com/tutorials/tutorial_details.aspx?tutorial_id=523
        //     * 
        //     * */

        //    //  find beginning of comments
        //    for (int startingIndex = 0; startingIndex < webdata.Length; startingIndex = m1.Index)
        //    {
        //        r = new Regex("<strong>Comments:&nbsp;</strong>&nbsp;");
        //        m = r.Match(webdata, startingIndex);
        //        if (m.Success)
        //        {
        //            r1 = new Regex("(<span class=\"caretnext\">&#187</span>)|(</div>)|(<span class=\"caretback\">&#171</span>)");
        //            m1 = r1.Match(webdata, m.Index + 38);

        //            if (m1.Success)  //  found end...
        //            {
        //                alComments.Add(webdata.Substring(m.Index + 45, m1.Index - (m.Index + 48)));
        //            }
        //        }
        //        else
        //            break;  //  we're done...
        //    }

        //    return;
        //}


        ////-----------------------------------    read the web page    ---------------------------------------------------------
        //private static string readWebPage(string URL)
        //{
        //    System.Net.ServicePointManager.MaxServicePointIdleTime = 10000;

        //    Uri uri = new Uri(URL);
        //    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(uri);
        //    request.Referer = "http://www.amazon.com/";

        //    request.KeepAlive = false;
        //    request.Method = "POST";
        //    request.ContentType = "application/x-www-form-urlencoded";
        //    request.ContentLength = 0;
        //    request.UserAgent = "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)";

        //    string page = string.Empty;  //  clear it...
        //    try
        //    {
        //        HttpWebResponse response = (HttpWebResponse)request.GetResponse();
        //        Stream responseStream = response.GetResponseStream();
        //        StreamReader readStream = new StreamReader(responseStream, Encoding.UTF8);
        //        page = readStream.ReadToEnd();

        //        Cursor.Current = Cursors.Default;
        //    }
        //    catch (Exception ex)
        //    {
        //        if (ex.Message.Contains("Unable to read data from the transport connection"))
        //            return "Unable to read data from the transport connection";
        //    }
        //    return (page);  //  next, page has to be parsed for prices and any errors
        //}

===================================================================================
        ////---------------------------------------------------------------------------------------
        //private void rbNo_CheckedChanged(object sender, EventArgs e) {
        //    bMassChange.Enabled = false;
        //}


        ////---------------------------------------------------------------------------------------
        //private void lbMChangeFields_SelectedIndexChanged(object sender, EventArgs e) {

        //    switch (lbMChangeFields.SelectedItem.ToString()) {
        //        case "Location":  //  can not be null
        //            tbMChangeFrom.MaxLength = 10;
        //            tbMChangeTo.MaxLength = 10;
        //            lMaxLength.Text = "10";
        //            break;
        //        case "Type":
        //        case "Edition":
        //            tbMChangeFrom.MaxLength = 15;
        //            tbMChangeTo.MaxLength = 15;
        //            lMaxLength.Text = "15";
        //            break;
        //        case "Size":
        //            tbMChangeFrom.MaxLength = 40;
        //            tbMChangeTo.MaxLength = 40;
        //            lMaxLength.Text = "40";
        //            break;
        //        case "Keywords":
        //            tbMChangeFrom.MaxLength = 85;
        //            tbMChangeTo.MaxLength = 85;
        //            lMaxLength.Text = "85";
        //            break;
        //        case "Jacket":
        //        case "Binding":
        //        case "Condition":
        //        case "Publisher Location":
        //            tbMChangeFrom.MaxLength = 25;
        //            tbMChangeTo.MaxLength = 25;
        //            lMaxLength.Text = "25";
        //            break;
        //        case "Catalog":
        //        case "Private Notes":
        //            tbMChangeFrom.MaxLength = 50;
        //            tbMChangeTo.MaxLength = 50;
        //            lMaxLength.Text = "50";
        //            break;
        //        case "Cost":
        //            tbMChangeFrom.MaxLength = 7;
        //            tbMChangeTo.MaxLength = 7;
        //            lMaxLength.Text = "7";
        //            break;
        //        case "Shipping":
        //            tbMChangeFrom.MaxLength = 2;
        //            tbMChangeTo.MaxLength = 2;
        //            lMaxLength.Text = "2";
        //            break;
        //        default:
        //            break;
        //    }

        //    lMaxLength.Refresh();
        //}

